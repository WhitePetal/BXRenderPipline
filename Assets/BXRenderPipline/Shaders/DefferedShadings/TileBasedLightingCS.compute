#pragma kernel CSMain

#include "Assets/BXRenderPipline/Shaders/Libiary/Common.hlsl"

// outpus
RWStructuredBuffer<uint> _TileLightingIndices;
RWStructuredBuffer<uint> _TileLightingDatas;

// inputs
#define MAX_POINT_LIGHT_COUNT 256
uint _PointLightCount;
float4 _PointLightSpheres[MAX_POINT_LIGHT_COUNT];
Texture2D _BXDepthNormalBuffer;
SamplerState sampler_bilinear_clamp;
float4 _ViewPortLB;
float4 _CameraForward;
float4 _TileRVec;
float4 _TileUVec;

// temps
groupshared uint tileMinDepth = 0xFFFFFFFF;
groupshared uint tileMaxDepth = 0;
groupshared uint tileVisibleLightCount = 0;
groupshared float4 tileNormal = float4(0, 0, 0, 0);

bool IntersectSide(float3 p1,float3 p2,float4 lightSphere){
    float3 n = normalize(cross(p1,p2));
    float d = dot(lightSphere.xyz - _WorldSpaceCameraPos.xyz,n);
    return d < lightSphere.w;
}

bool IntersectTileAndPointLight(float zMin, float zMax, uint3 groupId, float4 lightSphere)
{
    lightSphere.xyz = mul(unity_MatrixV, float4(lightSphere.xyz, 1.0)).xyz;
    float ww = lightSphere.w * lightSphere.w;
    float lightDepthMin = -lightSphere.z - lightSphere.w;
    float lightDepthMax = -lightSphere.z + lightSphere.w;

    if(lightDepthMin > zMax || lightDepthMax < zMin)
    {
        return false;
    }
    else
    {
        return true;
    }
    // else
    // {
        // float3 lb = _ViewPortLB.xyz;
        // float3 bmin = _WorldSpaceCameraPos.xyz + (lb + _TileRVec * groupId.x + _TileUVec * groupId.y) * zMin;
        // float3 bmax = _WorldSpaceCameraPos.xyz + (lb + _TileRVec * (groupId.x + 1) + _TileUVec * (groupId.y + 1)) * zMax;
        // // bmin = min(bmax, bmin);
        // // bmax = max(bmax, bmin);
        // float dmin = 0;
        // dmin += lightSphere.x < bmin.x ? (lightSphere.x - bmin.x)*(lightSphere.x - bmin.x) : 0.0;
        // dmin += lightSphere.y < bmin.y ? (lightSphere.y - bmin.y)*(lightSphere.y - bmin.y) : 0.0;
        // dmin += lightSphere.z < bmin.z ? (lightSphere.z - bmin.z)*(lightSphere.z - bmin.z) : 0.0;

        // dmin += lightSphere.x > bmax.x ? (lightSphere.x - bmax.x)*(lightSphere.x - bmin.x) : 0.0;
        // dmin += lightSphere.x > bmax.x ? (lightSphere.y - bmax.y)*(lightSphere.y - bmax.y) : 0.0;
        // dmin += lightSphere.x > bmax.x ? (lightSphere.z - bmax.z)*(lightSphere.z - bmax.z) : 0.0;
        // return dmin <= ww;
        // return dmin > 0;
    // }

    return true;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GROUPINDEX, uint3 groupId : SV_GROUPID)
{   
    if(groupIndex == 0)
    {
        tileMinDepth = _ProjectionParams.z;
        tileMaxDepth = 0;
        tileVisibleLightCount = 0;
        tileNormal = float4(0.0, 0.0, 0.0, 0.0);
    }
    GroupMemoryBarrierWithGroupSync();

    float4 depthNormalData = _BXDepthNormalBuffer.SampleLevel(sampler_bilinear_clamp, id.xy / _ScreenParams.xy, 0);
    float3 n;
    float depth01;
    DecodeDepthNormal(depthNormalData, depth01, n);
    float depth = depth01 * _ProjectionParams.z;
    n = mul((float3x3)unity_MatrixInvV, n);
    InterlockedMin(tileMinDepth,asuint(depth));
    InterlockedMax(tileMaxDepth,asuint(depth));
    GroupMemoryBarrierWithGroupSync();

    uint tileIndex = groupId.y * _ScreenParams.x / 16.0 + groupId.x;
    if (groupIndex < _PointLightCount && IntersectTileAndPointLight(asfloat(tileMinDepth), asfloat(tileMaxDepth), groupId, _PointLightSpheres[groupIndex]))
    {
        uint offset;
        InterlockedAdd(tileVisibleLightCount, 1, offset);
        _TileLightingIndices[tileIndex * 256 + offset] = groupIndex;
    }
    GroupMemoryBarrierWithGroupSync();
    if(groupIndex == 0)
    {
        _TileLightingDatas[tileIndex] = tileVisibleLightCount;
    }
    // GroupMemoryBarrierWithGroupSync();
}
